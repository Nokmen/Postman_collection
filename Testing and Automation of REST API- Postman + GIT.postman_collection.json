{
	"info": {
		"_postman_id": "8d247e2d-5e58-4d73-b218-7d6e63bf9ccb",
		"name": "Testing and Automation of REST API: Postman + GIT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Swapi.dev",
			"item": [
				{
					"name": "Swpai.api Set of tests.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3b6dc9f-7e90-4580-a342-00d11cc81f58",
								"exec": [
									"//1 Correct respons from Json.\r",
									"pm.test(\"Correct respons from Json\", function(){\r",
									"    pm.response.to.have.jsonBody()\r",
									"});\r",
									"\r",
									"//2 We have all the declared in the respons\r",
									"pm.test(\"Checking of all declared fild\", function(){\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"people\");\r",
									"    pm.expect(jsonData).to.have.property(\"planets\");\r",
									"    pm.expect(jsonData).to.have.property(\"films\");\r",
									"    pm.expect(jsonData).to.have.property(\"species\");\r",
									"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
									"    pm.expect(jsonData).to.have.property(\"starships\");\r",
									"});\r",
									"\r",
									"//3 Respon fields is not null \r",
									"pm.test(\"Checking of filds is not null\", function(){\r",
									"\r",
									"    var JsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(JsonData.people).not.equal(null);\r",
									"    pm.expect(JsonData.planets).not.equal(null);\r",
									"    pm.expect(JsonData.films).not.equal(null);\r",
									"    pm.expect(JsonData.species).not.equal(null);\r",
									"    pm.expect(JsonData.vehicles).not.equal(null);\r",
									"    pm.expect(JsonData.starships).not.equal(null);\r",
									"})\r",
									"\r",
									"//4 Filds in Json body of respons is not empty\r",
									"pm.test(\"Check if field in Json isn't empty\", function(){\r",
									"    \r",
									"    var JsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(JsonData.people).not.equal(\"\");\r",
									"    pm.expect(JsonData.planets).not.equal(\"\");\r",
									"    pm.expect(JsonData.films).not.equal(\"\");\r",
									"    pm.expect(JsonData.species).not.equal(\"\");\r",
									"    pm.expect(JsonData.vehicles).not.equal(\"\");\r",
									"    pm.expect(JsonData.starships).not.equal(\"\");\r",
									"\r",
									"})\r",
									"\r",
									"//5 Check if field corresponds to a specific value \r",
									"pm.test(\"Check if field corresponds to a specific value \",function(){ \r",
									"    \r",
									"    var JsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(JsonData.people).is.equal(\"http://swapi.dev/api/people/\");\r",
									"    pm.expect(JsonData.planets).is.equal(\"http://swapi.dev/api/planets/\");\r",
									"    pm.expect(JsonData.films).is.equal(\"http://swapi.dev/api/films/\");\r",
									"    pm.expect(JsonData.species).is.equal(\"http://swapi.dev/api/species/\");\r",
									"    pm.expect(JsonData.vehicles).is.equal(\"http://swapi.dev/api/vehicles/\");\r",
									"    pm.expect(JsonData.starships).is.equal(\"http://swapi.dev/api/starships/\");\r",
									"});\r",
									"\r",
									"//6 Status code is 200\r",
									"pm.test(\"Status code is 200\",function(){\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//7 Status message is Ok\r",
									"pm.test(\"Status message is Ok\",function(){\r",
									"    \r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//8 Response time is less then 1000ms\r",
									"pm.test(\"Response time is less then 1000ms\",function(){\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
									"});\r",
									"\r",
									"//9 There is a specific heade in the response\r",
									"pm.test(\"There is a specific heade in the response\",function(){\r",
									"\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//10 The response has a dpecific header with a specific value\r",
									"pm.test(\"The response has a dpecific header with a specific value\",function(){\r",
									"\r",
									"pm.response.to.be.header(\"Content-Type\",\"application/json\")\r",
									"});\r",
									"\r",
									"//11 Cookie exists\r",
									"pm.test(\"Cookie exists\",function(){\r",
									"    pm.cookies.has(\"__cfduid\"); //It doesn't work\r",
									"});\r",
									"\r",
									"// 12 Cookie has value\r",
									"pm.test(\"Cookie has value\",function(){\r",
									"    try{\r",
									"        var My_COOKEE = pm.cookies.get(\"__cfduid\");\r",
									"        console.log(My_COOKEE);\r",
									"    } catch(e){\r",
									"        console.log(\"SOME PROBLEM EITH COOKIE->\"+e)\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "JSON Schema lesson",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c334ec08-f17d-4526-8c3c-01f494c2332d",
								"exec": [
									"\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"console.log(data);\r",
									"\r",
									"var schema = {\r",
									"\r",
									"    //specify the type of object\r",
									"    \"type\": \"object\",\r",
									"\r",
									"    //specify required properties\r",
									"    \"required\":[\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
									"\r",
									"    //describe the properties\r",
									"    \"properties\": {\r",
									"        \"people\": {type: \"string\"},\r",
									"        \"planets\": {type: \"string\"},\r",
									"        \"films\":{type: \"string\"},\r",
									"        \"species\": {type: \"string\"},\r",
									"        \"vehicles\": {type: \"string\"},\r",
									"        \"starships\":{type: \"string\"},\r",
									"\r",
									"    } \r",
									"\r",
									"};\r",
									"\r",
									"pm.test(\"Body Filds have corect type\",function(){\r",
									"    pm.expect(tv4.validate(data,schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Swapi.dew People request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d394c2-0f47-49c0-a7f9-00479ea0be83",
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"var schema = {\r",
									"    \"type\":\"object\", \r",
									"\r",
									"    \"required\":[\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
									"\r",
									"    \"properties\":{\r",
									"        \"name\":{\r",
									"            \"type\":\"string\" \r",
									"        },\r",
									"\r",
									"        \"homeworld\":{\r",
									"            \"type\":\"string\"\r",
									"        },\r",
									"\r",
									"        \"films\":{\r",
									"         \"type\":\"array\",\r",
									"         \"items\":{\r",
									"             \"type\":\"string\"\r",
									"             },\r",
									"\r",
									"        },\r",
									"\r",
									"        \"species\":{\r",
									"            \"type\":\"array\",\r",
									"            \"items\":{\r",
									"                \"type\":\"string\"\r",
									"                },\r",
									"        },\r",
									"\r",
									"        \"vehicles\":{\r",
									"            \"type\":\"array\",\r",
									"            \"items\":{\r",
									"                \"type\":\"string\"\r",
									"                },\r",
									"        },\r",
									"\r",
									"         \"starships\":{\r",
									"            \"type\":\"array\",\r",
									"            \"items\":{\r",
									"                \"type\":\"string\"\r",
									"                }\r",
									"        },\r",
									"        \r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"pm.test('Body is correct',function(){\r",
									"\r",
									"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://swapi.dev/api/people/1",
							"protocol": "https",
							"host": [
								"swapi",
								"dev"
							],
							"path": [
								"api",
								"people",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Request to NASA",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "bc69887e0af0cebbe5ed653df3da45fd",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/planetary/apod?api_key=vxH4xa8su2fJBeLhnbJlgtVImmLSrD3qkFeMt5BW",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"planetary",
						"apod"
					],
					"query": [
						{
							"key": "api_key",
							"value": "vxH4xa8su2fJBeLhnbJlgtVImmLSrD3qkFeMt5BW"
						},
						{
							"key": "date",
							"value": "1995-06-16",
							"disabled": true
						},
						{
							"key": "hd",
							"value": "false",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "basic-auth",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://postman-echo.com/basic-auth?Authorization=Basic cG9zdG1hbjpwYXNzd29yZA==",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					],
					"query": [
						{
							"key": "Authorization",
							"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"7cd86b14-bfbd-41fa-b66a-456b00c44769",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"7cd86b14-bfbd-41fa-b66a-456b00c44769",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sun, 09 Aug 2020 18:53:49 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1596999289"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=9cbdd61c80ac0402"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=472ccbd6d39623cd"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Test\",\n        \"message\": \"success\",\n        \n    }\n}"
				},
				{
					"name": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Andrey\"\r\n}"
						},
						"url": {
							"raw": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"7cd86b14-bfbd-41fa-b66a-456b00c44769",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sun, 09 Aug 2020 18:56:53 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1596999289"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=9cbdd61c80ac0402"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=472ccbd6d39623cd"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Andrey\",\n        \"Status\":\"created\",\n        \"message\": \"success\"\n        \n    }\n}"
				}
			]
		},
		{
			"name": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io/action",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Andrey\"\r\n}"
				},
				"url": {
					"raw": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"7cd86b14-bfbd-41fa-b66a-456b00c44769",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"7cd86b14-bfbd-41fa-b66a-456b00c44769",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sun, 09 Aug 2020 18:53:49 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1596999289"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=9cbdd61c80ac0402"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=472ccbd6d39623cd"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Test\",\n        \"message\": \"success\",\n        \n    }\n}"
				},
				{
					"name": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Andrey\"\r\n}"
						},
						"url": {
							"raw": "https://7cd86b14-bfbd-41fa-b66a-456b00c44769.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"7cd86b14-bfbd-41fa-b66a-456b00c44769",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sun, 09 Aug 2020 18:56:53 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1596999289"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=9cbdd61c80ac0402"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=472ccbd6d39623cd"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Andrey\",\n        \"Status\":\"created\",\n        \"message\": \"success\"\n        \n    }\n}"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}